# -------------------------------------------------------------------
# parameter file (train)
#
# Note:
#   - Do not use '~/' in the path.
#   - A list must be specified in list format even if it has only one element.
# -------------------------------------------------------------------
# -----------------------------------------------
# Overwrite command line arguments.
# -----------------------------------------------
# log level (idx=0: stream handler, idx=1: file handler)
# (DEBUG: 10, INFO: 20, WARNING: 30, ERROR: 40, CRITICAL: 50)
level: [10, 10]
# random seed
seed: 0
# directory path (data save)
result: result
# number of workers (data loader)
num_workers: 4

# directory path (evaluation data)
eval: /mnt/c/Users/ruima/work/archive/pytorch/data/mnist/test
# batch size (evaluation data)
batch: 1000

# -----------------------------------------------
# Set non-command line arguments.
# -----------------------------------------------
# -------------------------------------
# data
# -------------------------------------
data:
  kind: mnist

# -------------------------------------
# data process
# -------------------------------------
process:
  kind: [one_hot, rescale]

  # one_hot
  one_hot:
    num_classes: &num_classes 10               # int

  # rescale
  rescale:
    scale: 0.00392156862745098                # float
    offset: 0                                 # float

# -------------------------------------
# model
# -------------------------------------
model:
  kind: simple

# -------------------------------------
# model layer
# -------------------------------------
layer:
  kind: [flatten, linear_1, relu, linear_2]
  # - conv2d_1
  # - relu
  # - conv2d_1
  # - relu
  # - maxpool2d
  # - conv2d_2
  # - relu
  # - conv2d_2
  # - relu
  # - maxpool2d
  # - conv2d_3
  # - relu
  # - conv2d_3
  # - relu
  # - conv2d_3
  # - relu
  # - maxpool2d
  # - flatten
  # - dense_1
  # - relu
  # - dense_2

  # Flatten
  flatten:
    start_dim: 1                              # int = 1,
    end_dim: -1                               # int = -1

  # Dense
  LINEAR: &LINEAR
    in_features: 0                            # int
    out_features: 0                           # int
    bias: true                                # bool
  linear_1:
    <<: *LINEAR
    in_features: 784
    out_features: &out_1 100
  linear_2:
    <<: *LINEAR
    in_features: *out_1
    out_features: *num_classes

  # Conv2D
  CONV2D: &CONV2D
    in_channels:                              # int
    out_channels:                             # int
    kernel_size:                              # _size_2_t
    stride: 1                                 # _size_2_t = 1
    padding: 0                                # _size_2_t | str = 0
    dilation: 1                               # _size_2_t = 1
    groups: 1                                 # int = 1
    bias: true                                # bool = True
    padding_mode: zeros                       # str = "zeros"
    # device: null                              # Any | None = None
    # dtype: null                               # Any | None = None
  conv2d_1:
    <<: *CONV2D
    in_channels: 1
    out_channels: 8
    kernel_size: 3
    padding: same
  conv2d_2:
    <<: *CONV2D
    in_channels: 8
    out_channels: 16
    kernel_size: 3
    padding: same
  conv2d_3:
    <<: *CONV2D
    in_channels: 16
    out_channels: 32
    kernel_size: 3
    padding: same

  # MaxPool2D
  MAXPOOL2D: &MAXPOOL2D
    kernel_size:                              # _size_any_t
    stride: null                              # _size_any_t | None = None
    padding: 0                                # _size_any_t = 0
    dilation: 1                               # _size_any_t = 1
    return_indices: false                     # bool = False
    ceil_mode: false                          # bool = False
  maxpool2d:
    <<: *MAXPOOL2D
    kernel_size: 2
    stride: 2

  # ReLU
  relu:
    inplace: false                            # bool

# -------------------------------------
# loss function
# -------------------------------------
loss:
  kind: ce

  # MeanSquaredError
  mse:
    reduction: mean                           # str = "mean"

  # Crossentropy
  ce:
    weight: null                              # Tensor | None = None
    ignore_index: -100                        # int = -100
    reduction: mean                           # str = "mean"
    label_smoothing: 0                        # float = 0

# -------------------------------------
# metrics
# -------------------------------------
metrics:
  kind: [mse, bacc]

  # MeanSquaredError
  mse:
    squared: true                             # bool = True
    num_outputs: 1                            # int = 1

  # BinaryAccuracy
  bacc:
    threshold: 0.5                            # float = 0.5
    multidim_average: global                  # Literal['global', 'samplewise'] = "global"
    ignore_index: null                        # int | None = None
    validate_args: true                       # bool = True

  # MulticlassAccuracy
  macc:
    num_classes: *num_classes                 # int
    top_k: 1                                  # int = 1
    average: macro                            # Literal['micro', 'macro', 'weighted', 'none'] | None = "macro"
    multidim_average: global                  # Literal['global', 'samplewise'] = "global"
    ignore_index: null                        # int | None = None
    validate_args: true                       # bool = True
