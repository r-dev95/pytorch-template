<?xml version="1.0" encoding="us-ascii" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="2056px" preserveAspectRatio="none" style="width:3648px;height:2056px;background:#FFFFFF;" version="1.1" viewBox="0 0 3648 2056" width="3648px" zoomAndPan="magnify"><defs/><g><!--class lib.data.base.BaseLoadData--><g id="elem_lib.data.base.BaseLoadData"><rect codeLine="4" fill="#A8C9EA" height="194.6719" id="lib.data.base.BaseLoadData" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="516" x="196.5" y="588"/><ellipse cx="354.75" cy="604" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M357.7188,609.6406 Q357.1406,609.9375 356.5,610.0781 Q355.8594,610.2344 355.1563,610.2344 Q352.6563,610.2344 351.3281,608.5938 Q350.0156,606.9375 350.0156,603.8125 Q350.0156,600.6875 351.3281,599.0313 Q352.6563,597.375 355.1563,597.375 Q355.8594,597.375 356.5,597.5313 Q357.1563,597.6875 357.7188,597.9844 L357.7188,600.7031 Q357.0938,600.125 356.5,599.8594 Q355.9063,599.5781 355.2813,599.5781 Q353.9375,599.5781 353.25,600.6563 Q352.5625,601.7188 352.5625,603.8125 Q352.5625,605.9063 353.25,606.9844 Q353.9375,608.0469 355.2813,608.0469 Q355.9063,608.0469 356.5,607.7813 Q357.0938,607.5 357.7188,606.9219 L357.7188,609.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="191" x="375.25" y="608.8467">lib.data.base.BaseLoadData</text><line style="stroke:#181818;stroke-width:0.5;" x1="197.5" x2="711.5" y1="620" y2="620"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="202.5" y="636.9951">Processor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="202.5" y="653.292">input_shape_model : ClassVar[list[int]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="202.5" y="669.5889">label_shape_model : ClassVar[list[int]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="202.5" y="685.8857">n_data : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="202.5" y="702.1826">params : dict[str, Any]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="202.5" y="718.4795">steps_per_epoch</text><line style="stroke:#181818;stroke-width:0.5;" x1="197.5" x2="711.5" y1="725.7813" y2="725.7813"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="202.5" y="742.7764">make_loader_example(seed: int) -&gt; Callable</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="504" x="202.5" y="759.0732">process(data: tuple[to.Tensor, to.Tensor]) -&gt; tuple[to.Tensor, to.Tensor]</text><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="206" x="202.5" y="775.3701">set_model_il_shape() -&gt; None</text></g><!--class lib.data.cifar.Cifar--><g id="elem_lib.data.cifar.Cifar"><rect codeLine="15" fill="#A8C9EA" height="129.4844" id="lib.data.cifar.Cifar" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="275" x="7" y="56"/><ellipse cx="82.75" cy="72" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M85.7188,77.6406 Q85.1406,77.9375 84.5,78.0781 Q83.8594,78.2344 83.1563,78.2344 Q80.6563,78.2344 79.3281,76.5938 Q78.0156,74.9375 78.0156,71.8125 Q78.0156,68.6875 79.3281,67.0313 Q80.6563,65.375 83.1563,65.375 Q83.8594,65.375 84.5,65.5313 Q85.1563,65.6875 85.7188,65.9844 L85.7188,68.7031 Q85.0938,68.125 84.5,67.8594 Q83.9063,67.5781 83.2813,67.5781 Q81.9375,67.5781 81.25,68.6563 Q80.5625,69.7188 80.5625,71.8125 Q80.5625,73.9063 81.25,74.9844 Q81.9375,76.0469 83.2813,76.0469 Q83.9063,76.0469 84.5,75.7813 Q85.0938,75.5 85.7188,74.9219 L85.7188,77.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="103.25" y="76.8467">lib.data.cifar.Cifar</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="281" y1="88" y2="88"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="13" y="104.9951">input_shape_model : ClassVar[list[int]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="13" y="121.292">label_shape_model : ClassVar[list[int]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="13" y="137.5889">n_data : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="13" y="153.8857">size : ClassVar[list[int]]</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="281" y1="161.1875" y2="161.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="206" x="13" y="178.1826">set_model_il_shape() -&gt; None</text></g><!--class lib.data.mnist.Mnist--><g id="elem_lib.data.mnist.Mnist"><rect codeLine="22" fill="#A8C9EA" height="129.4844" id="lib.data.mnist.Mnist" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="275" x="317" y="56"/><ellipse cx="384.25" cy="72" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M387.2188,77.6406 Q386.6406,77.9375 386,78.0781 Q385.3594,78.2344 384.6563,78.2344 Q382.1563,78.2344 380.8281,76.5938 Q379.5156,74.9375 379.5156,71.8125 Q379.5156,68.6875 380.8281,67.0313 Q382.1563,65.375 384.6563,65.375 Q385.3594,65.375 386,65.5313 Q386.6563,65.6875 387.2188,65.9844 L387.2188,68.7031 Q386.5938,68.125 386,67.8594 Q385.4063,67.5781 384.7813,67.5781 Q383.4375,67.5781 382.75,68.6563 Q382.0625,69.7188 382.0625,71.8125 Q382.0625,73.9063 382.75,74.9844 Q383.4375,76.0469 384.7813,76.0469 Q385.4063,76.0469 386,75.7813 Q386.5938,75.5 387.2188,74.9219 L387.2188,77.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="132" x="404.75" y="76.8467">lib.data.mnist.Mnist</text><line style="stroke:#181818;stroke-width:0.5;" x1="318" x2="591" y1="88" y2="88"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="323" y="104.9951">input_shape_model : ClassVar[list[int]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="323" y="121.292">label_shape_model : ClassVar[list[int]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="76" x="323" y="137.5889">n_data : int</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="323" y="153.8857">size : ClassVar[list[int]]</text><line style="stroke:#181818;stroke-width:0.5;" x1="318" x2="591" y1="161.1875" y2="161.1875"/><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="206" x="323" y="178.1826">set_model_il_shape() -&gt; None</text></g><!--class lib.data.processor.Processor--><g id="elem_lib.data.processor.Processor"><rect codeLine="29" fill="#A8C9EA" height="129.4844" id="lib.data.processor.Processor" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="465" x="627" y="56"/><ellipse cx="756.75" cy="72" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M759.7188,77.6406 Q759.1406,77.9375 758.5,78.0781 Q757.8594,78.2344 757.1563,78.2344 Q754.6563,78.2344 753.3281,76.5938 Q752.0156,74.9375 752.0156,71.8125 Q752.0156,68.6875 753.3281,67.0313 Q754.6563,65.375 757.1563,65.375 Q757.8594,65.375 758.5,65.5313 Q759.1563,65.6875 759.7188,65.9844 L759.7188,68.7031 Q759.0938,68.125 758.5,67.8594 Q757.9063,67.5781 757.2813,67.5781 Q755.9375,67.5781 755.25,68.6563 Q754.5625,69.7188 754.5625,71.8125 Q754.5625,73.9063 755.25,74.9844 Q755.9375,76.0469 757.2813,76.0469 Q757.9063,76.0469 758.5,75.7813 Q759.0938,75.5 759.7188,74.9219 L759.7188,77.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="777.25" y="76.8467">lib.data.processor.Processor</text><line style="stroke:#181818;stroke-width:0.5;" x1="628" x2="1091" y1="88" y2="88"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="633" y="104.9951">func : dict</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="633" y="121.292">params : dict[str, Any]</text><line style="stroke:#181818;stroke-width:0.5;" x1="628" x2="1091" y1="128.5938" y2="128.5938"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="453" x="633" y="145.5889">one_hot(x: to.Tensor, y: to.Tensor) -&gt; tuple[to.Tensor, to.Tensor]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="446" x="633" y="161.8857">rescale(x: to.Tensor, y: to.Tensor) -&gt; tuple[to.Tensor, to.Tensor]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="419" x="633" y="178.1826">run(x: to.Tensor, y: to.Tensor) -&gt; tuple[to.Tensor, to.Tensor]</text></g><!--class lib.model.base.BaseModel--><g id="elem_lib.model.base.BaseModel"><rect codeLine="36" fill="#A8C9EA" height="227.2656" id="lib.model.base.BaseModel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="550" x="2622.5" y="7"/><ellipse cx="2802.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2805.7188,28.6406 Q2805.1406,28.9375 2804.5,29.0781 Q2803.8594,29.2344 2803.1563,29.2344 Q2800.6563,29.2344 2799.3281,27.5938 Q2798.0156,25.9375 2798.0156,22.8125 Q2798.0156,19.6875 2799.3281,18.0313 Q2800.6563,16.375 2803.1563,16.375 Q2803.8594,16.375 2804.5,16.5313 Q2805.1563,16.6875 2805.7188,16.9844 L2805.7188,19.7031 Q2805.0938,19.125 2804.5,18.8594 Q2803.9063,18.5781 2803.2813,18.5781 Q2801.9375,18.5781 2801.25,19.6563 Q2800.5625,20.7188 2800.5625,22.8125 Q2800.5625,24.9063 2801.25,25.9844 Q2801.9375,27.0469 2803.2813,27.0469 Q2803.9063,27.0469 2804.5,26.7813 Q2805.0938,26.5 2805.7188,25.9219 L2805.7188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="2823.25" y="27.8467">lib.model.base.BaseModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="2623.5" x2="3171.5" y1="39" y2="39"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="28" x="2628.5" y="55.9951">loss</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="2628.5" y="72.292">model</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="23" x="2628.5" y="88.5889">opt</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="88" x="2628.5" y="104.8857">train_metrics</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="2628.5" y="121.1826">train_metrics_loss : MeanMetric</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="2628.5" y="137.4795">valid_metrics : NoneType</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="216" x="2628.5" y="153.7764">valid_metrics_loss : MeanMetric</text><line style="stroke:#181818;stroke-width:0.5;" x1="2623.5" x2="3171.5" y1="161.0781" y2="161.0781"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="232" x="2628.5" y="178.0732">configure_optimizers() -&gt; Callable</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="525" x="2628.5" y="194.3701">training_step(batch: tuple[to.Tensor, to.Tensor], batch_idx: int) -&gt; to.Tensor</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="460" x="2628.5" y="210.667">update_metrics(train: bool, data: tuple[to.Tensor]) -&gt; dict[str, float]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="538" x="2628.5" y="226.9639">validation_step(batch: tuple[to.Tensor, to.Tensor], batch_idx: int) -&gt; to.Tensor</text></g><!--class lib.model.simple.SimpleModel--><g id="elem_lib.model.simple.SimpleModel"><rect codeLine="49" fill="#A8C9EA" height="80.5938" id="lib.model.simple.SimpleModel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="248" x="3393.5" y="645"/><ellipse cx="3414.35" cy="661" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3417.3188,666.6406 Q3416.7406,666.9375 3416.1,667.0781 Q3415.4594,667.2344 3414.7563,667.2344 Q3412.2563,667.2344 3410.9281,665.5938 Q3409.6156,663.9375 3409.6156,660.8125 Q3409.6156,657.6875 3410.9281,656.0313 Q3412.2563,654.375 3414.7563,654.375 Q3415.4594,654.375 3416.1,654.5313 Q3416.7563,654.6875 3417.3188,654.9844 L3417.3188,657.7031 Q3416.6938,657.125 3416.1,656.8594 Q3415.5063,656.5781 3414.8813,656.5781 Q3413.5375,656.5781 3412.85,657.6563 Q3412.1625,658.7188 3412.1625,660.8125 Q3412.1625,662.9063 3412.85,663.9844 Q3413.5375,665.0469 3414.8813,665.0469 Q3415.5063,665.0469 3416.1,664.7813 Q3416.6938,664.5 3417.3188,663.9219 L3417.3188,666.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="3429.65" y="665.8467">lib.model.simple.SimpleModel</text><line style="stroke:#181818;stroke-width:0.5;" x1="3394.5" x2="3640.5" y1="677" y2="677"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="3399.5" y="693.9951">model_layers : Sequential</text><line style="stroke:#181818;stroke-width:0.5;" x1="3394.5" x2="3640.5" y1="701.2969" y2="701.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="3399.5" y="718.292">forward(x: to.Tensor) -&gt; to.Tensor</text></g><!--class lightning.pytorch.core.module.LightningModule--><g id="elem_lightning.pytorch.core.module.LightningModule"><rect codeLine="53" fill="#F1F1F1" height="748.7656" id="lightning.pytorch.core.module.LightningModule" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="2344" x="747.5" y="311"/><ellipse cx="1753.25" cy="327" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1756.2188,332.6406 Q1755.6406,332.9375 1755,333.0781 Q1754.3594,333.2344 1753.6563,333.2344 Q1751.1563,333.2344 1749.8281,331.5938 Q1748.5156,329.9375 1748.5156,326.8125 Q1748.5156,323.6875 1749.8281,322.0313 Q1751.1563,320.375 1753.6563,320.375 Q1754.3594,320.375 1755,320.5313 Q1755.6563,320.6875 1756.2188,320.9844 L1756.2188,323.7031 Q1755.5938,323.125 1755,322.8594 Q1754.4063,322.5781 1753.7813,322.5781 Q1752.4375,322.5781 1751.75,323.6563 Q1751.0625,324.7188 1751.0625,326.8125 Q1751.0625,328.9063 1751.75,329.9844 Q1752.4375,331.0469 1753.7813,331.0469 Q1754.4063,331.0469 1755,330.7813 Q1755.5938,330.5 1756.2188,329.9219 L1756.2188,332.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="1773.75" y="331.8467">lightning.pytorch.core.module.LightningModule</text><line style="stroke:#181818;stroke-width:0.5;" x1="748.5" x2="3090.5" y1="343" y2="343"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="753.5" y="359.9951">CHECKPOINT_HYPER_PARAMS_KEY : str</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="287" x="753.5" y="376.292">CHECKPOINT_HYPER_PARAMS_NAME : str</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="753.5" y="392.5889">CHECKPOINT_HYPER_PARAMS_TYPE : str</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="159" x="753.5" y="408.8857">automatic_optimization</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="753.5" y="425.1826">current_epoch</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="753.5" y="441.4795">device_mesh</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="753.5" y="457.7764">example_input_array</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="37" x="753.5" y="474.0732">fabric</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="78" x="753.5" y="490.3701">global_rank</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="753.5" y="506.667">global_step</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="753.5" y="522.9639">local_rank</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="44" x="753.5" y="539.2607">logger</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="753.5" y="555.5576">loggers</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="52" x="753.5" y="571.8545">on_gpu</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="753.5" y="588.1514">strict_loading</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="44" x="753.5" y="604.4482">trainer</text><line style="stroke:#181818;stroke-width:0.5;" x1="748.5" x2="3090.5" y1="611.75" y2="611.75"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="819" x="753.5" y="628.7451">all_gather(data: Union[Tensor, dict, list, tuple], group: Optional[Any], sync_grads: bool) -&gt; Union[Tensor, dict, list, tuple]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="753.5" y="645.042">backward(loss: Tensor) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="866" x="753.5" y="661.3389">clip_gradients(optimizer: Optimizer, gradient_clip_val: Optional[Union[int, float]], gradient_clip_algorithm: Optional[str]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="423" x="753.5" y="677.6357">configure_callbacks() -&gt; Union[Sequence[Callback], Callback]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="960" x="753.5" y="693.9326">configure_gradient_clipping(optimizer: Optimizer, gradient_clip_val: Optional[Union[int, float]], gradient_clip_algorithm: Optional[str]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="753.5" y="710.2295">configure_optimizers() -&gt; OptimizerLRScheduler</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="753.5" y="726.5264">forward() -&gt; Any</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="116" x="753.5" y="742.8232">freeze() -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1078" x="753.5" y="759.1201">load_from_checkpoint(checkpoint_path: Union[_PATH, IO], map_location: _MAP_LOCATION_TYPE, hparams_file: Optional[_PATH], strict: Optional[bool]) -&gt; Self</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="2291" x="753.5" y="775.417">log(name: str, value: _METRIC, prog_bar: bool, logger: Optional[bool], on_step: Optional[bool], on_epoch: Optional[bool], reduce_fx: Union[str, Callable], enable_graph: bool, sync_dist: bool, sync_dist_group: Optional[Any], add_dataloader_idx: bool, batch_size: Optional[int], metric_attribute: Optional[str], rank_zero_only: bool) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="2332" x="753.5" y="791.7139">log_dict(dictionary: Union[Mapping[str, _METRIC], MetricCollection], prog_bar: bool, logger: Optional[bool], on_step: Optional[bool], on_epoch: Optional[bool], reduce_fx: Union[str, Callable], enable_graph: bool, sync_dist: bool, sync_dist_group: Optional[Any], add_dataloader_idx: bool, batch_size: Optional[int], rank_zero_only: bool) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="585" x="753.5" y="808.0107">lr_scheduler_step(scheduler: LRSchedulerTypeUnion, metric: Optional[Any]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="533" x="753.5" y="824.3076">lr_schedulers() -&gt; Union[None, list[LRSchedulerPLType], LRSchedulerPLType]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="753.5" y="840.6045">manual_backward(loss: Tensor) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="989" x="753.5" y="856.9014">optimizer_step(epoch: int, batch_idx: int, optimizer: Union[Optimizer, LightningOptimizer], optimizer_closure: Optional[Callable[[], Any]]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="528" x="753.5" y="873.1982">optimizer_zero_grad(epoch: int, batch_idx: int, optimizer: Optimizer) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="659" x="753.5" y="889.4951">optimizers(use_pl_optimizer: Literal[True]) -&gt; Union[LightningOptimizer, list[LightningOptimizer]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="753.5" y="905.792">predict_step() -&gt; Any</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="753.5" y="922.0889">print() -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="197" x="753.5" y="938.3857">test_step() -&gt; STEP_OUTPUT</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="562" x="753.5" y="954.6826">to_onnx(file_path: Union[str, Path, BytesIO], input_sample: Optional[Any]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1042" x="753.5" y="970.9795">to_torchscript(file_path: Optional[Union[str, Path]], method: Optional[str], example_inputs: Optional[Any]) -&gt; Union[ScriptModule, dict[str, ScriptModule]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="513" x="753.5" y="987.2764">toggle_optimizer(optimizer: Union[Optimizer, LightningOptimizer]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="225" x="753.5" y="1003.5732">training_step() -&gt; STEP_OUTPUT</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="134" x="753.5" y="1019.8701">unfreeze() -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="531" x="753.5" y="1036.167">untoggle_optimizer(optimizer: Union[Optimizer, LightningOptimizer]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="236" x="753.5" y="1052.4639">validation_step() -&gt; STEP_OUTPUT</text></g><!--class torch.nn.modules.module.Module--><g id="elem_torch.nn.modules.module.Module"><rect codeLine="98" fill="#F1F1F1" height="928.0313" id="torch.nn.modules.module.Module" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1250" x="2093.5" y="1121"/><ellipse cx="2597.75" cy="1137" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2600.7188,1142.6406 Q2600.1406,1142.9375 2599.5,1143.0781 Q2598.8594,1143.2344 2598.1563,1143.2344 Q2595.6563,1143.2344 2594.3281,1141.5938 Q2593.0156,1139.9375 2593.0156,1136.8125 Q2593.0156,1133.6875 2594.3281,1132.0313 Q2595.6563,1130.375 2598.1563,1130.375 Q2598.8594,1130.375 2599.5,1130.5313 Q2600.1563,1130.6875 2600.7188,1130.9844 L2600.7188,1133.7031 Q2600.0938,1133.125 2599.5,1132.8594 Q2598.9063,1132.5781 2598.2813,1132.5781 Q2596.9375,1132.5781 2596.25,1133.6563 Q2595.5625,1134.7188 2595.5625,1136.8125 Q2595.5625,1138.9063 2596.25,1139.9844 Q2596.9375,1141.0469 2598.2813,1141.0469 Q2598.9063,1141.0469 2599.5,1140.7813 Q2600.0938,1140.5 2600.7188,1139.9219 L2600.7188,1142.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="2618.25" y="1141.8467">torch.nn.modules.module.Module</text><line style="stroke:#181818;stroke-width:0.5;" x1="2094.5" x2="3342.5" y1="1153" y2="1153"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="199" x="2099.5" y="1169.9951">T_destination : T_destination</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="139" x="2099.5" y="1186.292">call_super_init : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="2099.5" y="1202.5889">dump_patches : bool</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="172" x="2099.5" y="1218.8857">forward : Callable[..., Any]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="94" x="2099.5" y="1235.1826">training : bool</text><line style="stroke:#181818;stroke-width:0.5;" x1="2094.5" x2="3342.5" y1="1242.4844" y2="1242.4844"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="416" x="2099.5" y="1259.4795">add_module(name: str, module: Optional['Module']) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="2099.5" y="1275.7764">apply(fn: Callable[['Module'], None]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="2099.5" y="1292.0732">bfloat16() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="2099.5" y="1308.3701">buffers(recurse: bool) -&gt; Iterator[Tensor]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="2099.5" y="1324.667">children() -&gt; Iterator['Module']</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="64" x="2099.5" y="1340.9639">compile()</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="70" x="2099.5" y="1357.2607">cpu() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="2099.5" y="1373.5576">cuda(device: Optional[Union[int, device]]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="92" x="2099.5" y="1389.8545">double() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="2099.5" y="1406.1514">eval() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="2099.5" y="1422.4482">extra_repr() -&gt; str</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="73" x="2099.5" y="1438.7451">float() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="228" x="2099.5" y="1455.042">get_buffer(target: str) -&gt; 'Tensor'</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="2099.5" y="1471.3389">get_extra_state() -&gt; Any</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="281" x="2099.5" y="1487.6357">get_parameter(target: str) -&gt; 'Parameter'</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="2099.5" y="1503.9326">get_submodule(target: str) -&gt; 'Module'</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="68" x="2099.5" y="1520.2295">half() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="2099.5" y="1536.5264">ipu(device: Optional[Union[int, device]]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="2099.5" y="1552.8232">load_state_dict(state_dict: Mapping[str, Any], strict: bool, assign: bool)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="2099.5" y="1569.1201">modules() -&gt; Iterator['Module']</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="2099.5" y="1585.417">mtia(device: Optional[Union[int, device]]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="650" x="2099.5" y="1601.7139">named_buffers(prefix: str, recurse: bool, remove_duplicate: bool) -&gt; Iterator[tuple[str, Tensor]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="2099.5" y="1618.0107">named_children() -&gt; Iterator[tuple[str, 'Module']]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="575" x="2099.5" y="1634.3076">named_modules(memo: Optional[set['Module']], prefix: str, remove_duplicate: bool)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="703" x="2099.5" y="1650.6045">named_parameters(prefix: str, recurse: bool, remove_duplicate: bool) -&gt; Iterator[tuple[str, Parameter]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="2099.5" y="1666.9014">parameters(recurse: bool) -&gt; Iterator[Parameter]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="771" x="2099.5" y="1683.1982">register_backward_hook(hook: Callable[['Module', _grad_t, _grad_t], Union[None, _grad_t]]) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="533" x="2099.5" y="1699.4951">register_buffer(name: str, tensor: Optional[Tensor], persistent: bool) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1135" x="2099.5" y="1715.792">register_forward_hook(hook: Union[Callable[[T, tuple[Any, ...], Any], Optional[Any]], Callable[[T, tuple[Any, ...], dict[str, Any], Any], Optional[Any]]]) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1238" x="2099.5" y="1732.0889">register_forward_pre_hook(hook: Union[Callable[[T, tuple[Any, ...]], Optional[Any]], Callable[[T, tuple[Any, ...], dict[str, Any]], Optional[tuple[Any, dict[str, Any]]]]]) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="903" x="2099.5" y="1748.3857">register_full_backward_hook(hook: Callable[['Module', _grad_t, _grad_t], Union[None, _grad_t]], prepend: bool) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="875" x="2099.5" y="1764.6826">register_full_backward_pre_hook(hook: Callable[['Module', _grad_t], Union[None, _grad_t]], prepend: bool) -&gt; RemovableHandle</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="2099.5" y="1780.9795">register_load_state_dict_post_hook(hook)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="2099.5" y="1797.2764">register_load_state_dict_pre_hook(hook)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="443" x="2099.5" y="1813.5732">register_module(name: str, module: Optional['Module']) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="467" x="2099.5" y="1829.8701">register_parameter(name: str, param: Optional[Parameter]) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="252" x="2099.5" y="1846.167">register_state_dict_post_hook(hook)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="2099.5" y="1862.4639">register_state_dict_pre_hook(hook)</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="2099.5" y="1878.7607">requires_grad_(requires_grad: bool) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="246" x="2099.5" y="1895.0576">set_extra_state(state: Any) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="454" x="2099.5" y="1911.3545">set_submodule(target: str, module: 'Module', strict: bool) -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="146" x="2099.5" y="1927.6514">share_memory() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="2099.5" y="1943.9482">state_dict() -&gt; T_destination</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="604" x="2099.5" y="1960.2451">to(device: Optional[DeviceLikeType], dtype: Optional[dtype], non_blocking: bool) -&gt; Self</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="2099.5" y="1976.542">to_empty() -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="153" x="2099.5" y="1992.8389">train(mode: bool) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="257" x="2099.5" y="2009.1357">type(dst_type: Union[dtype, str]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="310" x="2099.5" y="2025.4326">xpu(device: Optional[Union[int, device]]) -&gt; T</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="2099.5" y="2041.7295">zero_grad(set_to_none: bool) -&gt; None</text></g><!--class train.Trainer--><g id="elem_train.Trainer"><rect codeLine="154" fill="#A8C9EA" height="194.6719" id="train.Trainer" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="232" x="3126.5" y="588"/><ellipse cx="3197.25" cy="604" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3200.2188,609.6406 Q3199.6406,609.9375 3199,610.0781 Q3198.3594,610.2344 3197.6563,610.2344 Q3195.1563,610.2344 3193.8281,608.5938 Q3192.5156,606.9375 3192.5156,603.8125 Q3192.5156,600.6875 3193.8281,599.0313 Q3195.1563,597.375 3197.6563,597.375 Q3198.3594,597.375 3199,597.5313 Q3199.6563,597.6875 3200.2188,597.9844 L3200.2188,600.7031 Q3199.5938,600.125 3199,599.8594 Q3198.4063,599.5781 3197.7813,599.5781 Q3196.4375,599.5781 3195.75,600.6563 Q3195.0625,601.7188 3195.0625,603.8125 Q3195.0625,605.9063 3195.75,606.9844 Q3196.4375,608.0469 3197.7813,608.0469 Q3198.4063,608.0469 3199,607.7813 Q3199.5938,607.5 3200.2188,606.9219 L3200.2188,609.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="3217.75" y="608.8467">train.Trainer</text><line style="stroke:#181818;stroke-width:0.5;" x1="3127.5" x2="3357.5" y1="620" y2="620"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="3132.5" y="636.9951">callbacks : list[Callable]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="3132.5" y="653.292">classes : ClassVar[dict[str, Any]]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="3132.5" y="669.5889">model</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="150" x="3132.5" y="685.8857">params : dict[str, Any]</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="3132.5" y="702.1826">train_data</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="3132.5" y="718.4795">valid_data</text><line style="stroke:#181818;stroke-width:0.5;" x1="3127.5" x2="3357.5" y1="725.7813" y2="725.7813"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="160" x="3132.5" y="742.7764">load_dataset() -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="3132.5" y="759.0732">run() -&gt; None</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="3132.5" y="775.3701">setup() -&gt; None</text></g><!--link lib.data.cifar.Cifar to lib.data.base.BaseLoadData--><g id="link_lib.data.cifar.Cifar_lib.data.base.BaseLoadData"><path codeLine="165" d="M179.61,185.26 C233.74,283.58 329.2784,457.072 392.6784,572.222 " fill="none" id="lib.data.cifar.Cifar-to-lib.data.base.BaseLoadData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="401.36,587.99,397.9344,569.3281,387.4224,575.1159,401.36,587.99" style="stroke:#181818;stroke-width:1.0;"/></g><!--link lib.data.mnist.Mnist to lib.data.base.BaseLoadData--><g id="link_lib.data.mnist.Mnist_lib.data.base.BaseLoadData"><path codeLine="166" d="M454.5,185.26 C454.5,283.58 454.5,454.84 454.5,569.99 " fill="none" id="lib.data.mnist.Mnist-to-lib.data.base.BaseLoadData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="454.5,587.99,460.5,569.99,448.5,569.99,454.5,587.99" style="stroke:#181818;stroke-width:1.0;"/></g><!--link lib.model.base.BaseModel to lightning.pytorch.core.module.LightningModule--><g id="link_lib.model.base.BaseModel_lightning.pytorch.core.module.LightningModule"><path codeLine="167" d="M2701.94,234.08 C2661.11,257.58 2631.5395,274.5992 2584.1195,301.8992 " fill="none" id="lib.model.base.BaseModel-to-lightning.pytorch.core.module.LightningModule" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2568.52,310.88,2587.1131,307.0991,2581.126,296.6994,2568.52,310.88" style="stroke:#181818;stroke-width:1.0;"/></g><!--link lib.model.simple.SimpleModel to torch.nn.modules.module.Module--><g id="link_lib.model.simple.SimpleModel_torch.nn.modules.module.Module"><path codeLine="168" d="M3509.73,726.09 C3494.1,798.14 3453.51,953.11 3375.5,1060 C3360.45,1080.62 3356.0535,1087.17 3339.1835,1107 " fill="none" id="lib.model.simple.SimpleModel-to-torch.nn.modules.module.Module" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="3327.52,1120.71,3343.7535,1110.8879,3334.6135,1103.1122,3327.52,1120.71" style="stroke:#181818;stroke-width:1.0;"/></g><!--link lightning.pytorch.core.module.LightningModule to torch.nn.modules.module.Module--><g id="link_lightning.pytorch.core.module.LightningModule_torch.nn.modules.module.Module"><path codeLine="169" d="M2252.27,1060.3 C2270.05,1080.26 2276.042,1086.9951 2294.032,1107.2051 " fill="none" id="lightning.pytorch.core.module.LightningModule-to-torch.nn.modules.module.Module" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2306,1120.65,2298.5136,1103.2157,2289.5503,1111.1944,2306,1120.65" style="stroke:#181818;stroke-width:1.0;"/></g><!--link lib.data.processor.Processor to lib.data.base.BaseLoadData--><g id="link_lib.data.processor.Processor_lib.data.base.BaseLoadData"><path codeLine="170" d="M813.63,185.26 C742.91,283.58 613.7679,463.0989 530.9279,578.2489 " fill="none" id="lib.data.processor.Processor-to-lib.data.base.BaseLoadData" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="523.92,587.99,530.671,585.4554,530.9279,578.2489,524.1769,580.7835,523.92,587.99" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="63" x="752.5" y="277.0669">Processor</text></g><!--link lib.model.base.BaseModel to train.Trainer--><g id="link_lib.model.base.BaseModel_train.Trainer"><path codeLine="171" d="M3042.62,234.08 C3066.88,257.59 3090.1,283.62 3108.5,311 C3165.76,396.19 3198.8099,497.1083 3218.8999,576.3183 " fill="none" id="lib.model.base.BaseModel-to-train.Trainer" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3221.85,587.95,3224.2522,581.1508,3218.8999,576.3183,3216.4977,583.1175,3221.85,587.95" style="stroke:#181818;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="40" x="3087.5" y="277.0669">model</text></g><!--SRC=[vLfVR-Cs4d_Ffr1x3wjTA0RkfUZveK3g1jYWTcB4tWCMXa7G4cqBaKILfBPnU_tkDpEKA4fMbAGR5CNTYoEIm-5l_W-bV9E8VLg8O75rSyjcywlLYitkvdVtmJ_uz_6_1B-uqC841S-5BdaiLgBaYXkfWa8MuYBEkDR1jrcwcoJSyCcEQp7v4NxcaYS_mSot0TV1qyldn_v-4GHB9MEXjLJmd1PbPPW-ybAmN2OY2wR134_zDrURBDLcanPckmNAZEz4zYBAWY4QM8O96A94kOPXaiPceusAWglYX8JQY5ApKYWcIXaVOIRd3u9bW1xd7dbUPYBKGYJ4wtrm-KCmunaWoGGojdA4UDeqC1KGRuoSh4K1iaM1UzpInf5ruFKxtm4o7fi_m1vMFfRMueQq_nODyiUPIU9qpzLaXhzTOtWBmsRu2rIlqz_4axH_MkIy03QJ1VvsHVOM_iT4BfkGcRZWwOe-G32iWdrLn7KiZCO6u617QSB7QU3vxCaRlS2hbT0nXn3wEYPLyJKCEieabRTvQe53fyYXnM4bPb9hp1P8WRegKPTWsBHWkJ0gZNL_p70Bw7aXUB6WAQ3umhCqQIXW4Os_FfMYlpIuEPR5FZrKIZ0uFit1xPGE-ocACAJ5WM6g2tVSnCVHJ1K5HCFIvB5DUMuP65Obk9jeW8N4VnhifCoYO30FskJNkjSUiglPDX9oayhYZS0D65gdcC4dA_epPEnpWc63sr3D-0cK38POYLygKPYKe_NtKltALTBnqQUX7Ou63J8fJr1bu-CabaeWc0fWp9lL1OrhhA_OGLXd7wzdFo_lRcxNxEFdvVKzMrxTNorMxEVhpm0TZ312Stkrk7wMQ0q3HyGh8tCmOzou8PaK_RDI2dJaIciYlgGnUex6KLrScSt8N2b-GbNodNNkGoPtF6EA5m_j2Ds4WYzkbp9vE0Zb7ZHbBdOeAohlmCnGEGSDDT50r10XxC3DKQYwUdyg0FMcyJbqroZ0r1rPXmJVEoXPbTFWhaJvUBR1F1a5-bJ4xA1uecqKaE6VOmO0TZn-8A_1q9u6djTG1G3rPMb9Z5DGeWvTZ5i4z8YOx3eZQeWe3vy50M7InDosJy-pWrIfEURUBj3PjWF3PHbGUeQewoHZsTj0YCLcLg_28UwnixrpT0ds-1k8r4-S3iRyVXKV1KQKyWASQC3iEAM4-CqlsUY0F65x9NC6M-E7KWBEi7ra9RXRusSGIUkFKN1p1mBal6JeqeXs6h35rPBDxsPNwvkxMugqA3ZQAitsQIOykOW9kY2vkRU0VcWbNebiRsCZn1QVOZR2p5i9FEfwVNypYx2FFR0TLqqUjw7KPnW5TQOUNA0eFrzHe4G8-lrZ8pa1Q0eK48W27z0xocDpFiLK0l5oDi66Wv0d2JLXTUDEzS7kj0K3Up9l4tPZe7SgOOmR-BEhZEXv36273CF06IIJHNRomjiP_C0mjaFymOtgr4YvuEJYLjfQpy3HrkwPp391ExR_hxf_LhMAwIO0RNVWXjF02qvibaYsnfmzU4_nxEGmNBVvUUEnNiwHEM0zdwDxOb514NesYxiCOwMeBKKPhDlBH86N3YqkBocwCk_cjju6I7rIGpxpX6-ilDbiRKU_7KP5Di0K-b9e3i0WFnrMMh0oOzwEUMg40aXhLOcjf_PpcHeZd0kxfTksm42pYlHISQamqVfmsbkM4ThVi5fVBzdTf_Noqngx0VI-uZ74jDh9pXGdIvY8WXzFm8BIT7rrfAvbnCk0ANLfEbPfQNpUlIhc3jdQN7IKoLa6wZH9UkZKkWhJORO5ZBnUsvyd7Hh8BfbNzy9NEbr7qixLOa2_LJ5G9QlYBJ6qbkxV9ixmk1RSDj55KRVGkccblPvxd8IQx3LBmBVIWew4PhWpnYO3EqnTuRibq989R8x3DhZAI_G8o2cwdQrR37nnq4JkP39nb_56r-q6JBiMbL_PxOpdAEyiv7SThK5noaxXll0EQmaZehBqQCKTTLh__2viPwhz7aDT2MZnjV2ozmr6EYXlqrxUusEQ9N0F2Bi4xZZgn_8ImYHyZyzbrHuKLmaFxRLXk0cqQziMR2AhNIPQ3WBSmXizWXwP4gMoS_O2G_ArH0TXc9KmD5p1Y5HBo- -iMEzgAijE6xWF-_a8bwXX4sQ8nx9PQjZeQbSRyeosLX8G7dcsRp6ceALNwOLwKq9gEvRsSHfqUfNwKbDtbBQEGzIaX_gI_zxUXJ4eHYoQmytuTG3HXnFMU1Qa-dtwMFjqnyrmcCilW1qkKYaqpOFkPzyXqExQ4xVkZ2SSqjlY96atDIBdSBYVfOLfvQPcheDx4AZZwNpaJULrxcLhPdl6IBIsU-YLtG6ACAIjfhTXHoaVGlmPoXVGtcBxm8nx03tuVLKpQsrzZz8WXu-yIEWDLNkU3JelcncodQTlznu8qgh6NOKvxnqTmpgd-lWji5QATNqZnu8Q1P1njqq8T4hjDWh6ztJVdWxpU5O13LxmXjTX_agu_dQFj4Vq4W6gB7jpjw6eAaMHU9P-COQUAaTmlD7nlKJBIWaDg4FmVfJKnzgX_BDrtZ5eov77WoOz5cqM6EJnCg76vVcbIfNGLhTXP-Xf5yk1xfLN-fsY8_hOz5FLirLGQsU_fdMO7Bd2jvAvLAUsmdgrqixrsZiZp-lRJpGnJnz4VNDC3Fpr26WCymKqgRjCnWzGTZr0zSiQk468l3GU6Eh-Gdm5tLCJyWiJC8Ozo3emdKBojkNryRKDGtilH2K39FmSt5TUsr8ZmCdQlbsr7RG_C_nAtRrFXAQMxdtkpGIz_GJ6r22x3sczVEHzVddw8vRz18El9zmdbNf0qOVF85_dWe9VctfELfMTRtE3NrWlB__pmyY7y8l1RvGlsJJuKQhU-8el0nUZtpo8t_Yjv-9r7o9Und7au-NbvOUnVooOUlz5CAAc3prFd5gd-Iy0]--></g></svg>