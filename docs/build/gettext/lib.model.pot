# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, r-dev95
# This file is distributed under the same license as the pytorch-template package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pytorch-template \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-18 20:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/lib.model.rst:2
msgid "model package"
msgstr ""

#: ../../source/lib.model.rst:11
msgid "base.py"
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base:1
msgid "This is the module that defines the base model."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.check_params:1
msgid "Checks the :class:`BaseModel` parameters."
msgstr ""

#: ../../source/lib.model.rst:0
msgid "Parameters"
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel:6
#: ../../../src/lib/model/base.py:docstring of lib.model.base.check_params:3
msgid "class list."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel:1
msgid "Bases: :py:class:`~lightning.pytorch.core.module.LightningModule`"
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel:1
msgid "Defines the base model."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel:3
msgid "You can customize :meth:`training_step` and :meth:`validation_step` using ``.fit``."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.update_metrics:1
msgid "Updates metrics."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.update_metrics:3
msgid "train flag (training step: True, validation step: False)."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.update_metrics:5
msgid "tuple of labels, preds, and losses."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.configure_optimizers:0
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:0
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.update_metrics:0
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:0
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.conv2d:0
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.flatten:0
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.linear:0
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.maxpool2d:0
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.relu:0
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.setup:0
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel.setup:0
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel.simple:0
#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel.forward:0
msgid "Returns"
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.update_metrics:8
msgid "**dict[str, float]** -- all metrics results."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.configure_optimizers:1
msgid "Returns the optimizer method class."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.configure_optimizers:3
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:3
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:3
#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel.forward:3
msgid "This function is decorated by ``@override``."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.configure_optimizers:5
msgid "**Callable** -- optimizer method class."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:1
msgid "Trains the model one step at a time."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:5
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:5
msgid "Output predictions. (forward propagation)"
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:6
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:6
msgid "Output losses."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:7
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:7
msgid "Update metrics."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:8
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:8
msgid "Output log."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:10
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:10
msgid "tuple of inputs and labels."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:12
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:12
msgid "batch index."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.training_step:15
#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:15
msgid "**to.Tensor** -- loss between the label and the model prediction."
msgstr ""

#: ../../../src/lib/model/base.py:docstring of lib.model.base.BaseModel.validation_step:1
msgid "Validations the model one step at a time."
msgstr ""

#: ../../source/lib.model.rst:19
msgid "layer.py"
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer:1
msgid "This is the module that sets up model layers."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.check_params:1
msgid "Checks the :class:`SetupLayer` parameters."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer:7
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.check_params:3
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel:7
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.check_params:3
#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel:6
#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.check_params:3
msgid "parameters."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.check_params:5
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.check_params:5
msgid "Class variables whose values are available methods."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer:1
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel:1
msgid "Bases: :py:class:`object`"
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer:1
msgid "Sets up the model layer."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer:3
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel:3
msgid "If you want to use some other settings, implement it as a method of this class. If you implemented, set the name as the ``func`` key in ``__init__`` and the method as the value."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.setup:1
msgid "Sets up model layers."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.setup:3
msgid "**list[Callable]** -- list of model layers."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.flatten:1
msgid "Sets ``to.nn.Flatten``."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.conv2d:3
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.flatten:3
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.linear:3
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.maxpool2d:3
#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.relu:3
msgid "**Callable** -- model layer class."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.linear:1
msgid "Sets ``to.nn.Linear``."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.conv2d:1
msgid "Sets ``to.nn.Conv2d``."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.maxpool2d:1
msgid "Sets ``to.nn.MaxPool2d``."
msgstr ""

#: ../../../src/lib/model/layer.py:docstring of lib.model.layer.SetupLayer.relu:1
msgid "Sets ``to.nn.ReLU``."
msgstr ""

#: ../../source/lib.model.rst:27
msgid "setup.py"
msgstr ""

#: ../../../src/lib/model/setup.py:docstring of lib.model.setup:1
msgid "This is the module that sets up model."
msgstr ""

#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.check_params:1
msgid "Checks the :class:`SetupModel` parameters."
msgstr ""

#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel:1
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel.setup:1
msgid "Sets up model."
msgstr ""

#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel.setup:3
#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel.simple:3
msgid "**Callable** -- model class."
msgstr ""

#: ../../../src/lib/model/setup.py:docstring of lib.model.setup.SetupModel.simple:1
msgid "Sets :class:`lib.model.simple.SimpleModel`."
msgstr ""

#: ../../source/lib.model.rst:35
msgid "simple.py"
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple:1
msgid "This is the module that builds simple model."
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.check_params:1
msgid "Checks the :class:`SimpleModel` parameters."
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel:1
msgid "Bases: :py:class:`~torch.nn.modules.module.Module`"
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel:1
msgid "Builds the following simple model."
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel:3
msgid "MLP (Multi Layer Perceptron)"
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel:4
msgid "CNN (Convolutional Neural Network)"
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel.forward:1
msgid "Outputs the model predictions."
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel.forward:5
msgid "input."
msgstr ""

#: ../../../src/lib/model/simple.py:docstring of lib.model.simple.SimpleModel.forward:8
msgid "**to.Tensor** -- output."
msgstr ""
